{$X+}
unit general;
interface
uses Dos,Crt,Video,Filez;
var f:file of byte;
    fw:file of word;
    checksum:longint;
    w:word;
    leslash:img16;
    bn_fw,ba_fw:img16;
    lewhdir,leup,ledown,leindir,ledot,leok,lecancel,lememory,leback,ledeg:img16;
    lea,leb,lec,led,lef,leg,leh,lei,lej:img16;
    lek,lel,lem,len,leo,lep,leq,ler,les:img16;
    let,leu,lev,lew,lex,ley,lez,le0,le1:img16;
    le2,le3,le4,le5,le6,le7,le8,le9,le_,lee:img16;
    c_smem:img16;
    c_paste:img16;
    c_pensula:img16;
    c_carbune:img16;
    c_wind:img16;
    c_creta:img16;
    c_flood:img16;
    c_creion:img16;
    c_sageata:img16;
    c_sageata2:img16;
    c_sageata3:img16;
    c_eyedrop:img16;
    c_paint:img16;
    bn_mask:img16;
    ba_mask:img16;
    bn_wand:img16;
    ba_wand:img16;
    bn_rech:img16;
    ba_rech:img16;
    bn_blur:img16;
    ba_blur:img16;
    bn_csing:img16;
    ba_csing:img16;
    bn_bleed:img16;
    ba_bleed:img16;
    bn_xsing:img16;
    ba_xsing:img16;
    bn_ccolr:img16;
    ba_ccolr:img16;
    bn_static:img16;
    ba_static:img16;
    bn_xcolr:img16;
    ba_xcolr:img16;
    bn_fliph:img16;
    ba_fliph:img16;
    bn_flipv:img16;
    ba_flipv:img16;
    bn_skewh:img16;
    ba_skewh:img16;
    bn_skewv:img16;
    ba_skewv:img16;
    bn_rot:img16;
    ba_rot:img16;
    bn_copy:img16;
    ba_copy:img16;
    bn_size:img16;
    ba_size:img16;
    bn_cut:img16;
    ba_cut:img16;
    bn_smem:img16;
    ba_smem:img16;
    bn_paste:img16;
    ba_paste:img16;
    bn_flood:img16;
    ba_flood:img16;
    bn_paint:img16;
    ba_paint:img16;
    bn_wind:img16;
    ba_wind:img16;
    bn_anim:img16;
    ba_anim:img16;
    bn_mirr:img16;
    ba_mirr:img16;
    bn_morph:img16;
    ba_morph:img16;
    bn_text:img16;
    ba_text:img16;
    bn_tint:img16;
    ba_tint:img16;
    bn_load:img16;
    ba_load:img16;
    bn_save:img16;
    ba_save:img16;
    bn_cray:img16;
    ba_cray:img16;
    bn_rectangle:img16;
    ba_rectangle:img16;
    bn_filledrect:img16;
    ba_filledrect:img16;
    bn_eyedrop:img16;
    ba_eyedrop:img16;
    bn_new:img16;
    ba_new:img16;
    bn_undo:img16;
    ba_undo:img16;
    bn_chalk:img16;
    ba_chalk:img16;
    bn_charc:img16;
    ba_charc:img16;
    bn_line:img16;
    ba_line:img16;
    bn_felttip:img16;
    ba_felttip:img16;
    bn_for2bak:img16;
    ba_for2bak:img16;
    bn_xforbak:img16;
    ba_xforbak:img16;
    bn_iesire:img16;
    ba_iesire:img16;

Procedure BlastTextCursor;
Procedure ShowProg(procent:byte);
Procedure LoadSpr;
Procedure FuckUp;
Function Tampered:boolean;

implementation
Procedure BlastTextCursor;assembler;
 asm
    mov ah,01h
    mov ch,20h
    int 10h
end;
{ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ}
Procedure FuckUp;
begin
ClrScr;
delay(100);
for i:=1 to 30 do
begin
for j:=1 to 100 do
begin
sound(300+random(3000));
delay(1);
end;
nosound;
if i mod 2=0 then textbackground(0);
if i mod 2=1 then textbackground(15);
waitretrace;
clrscr;
end;
nosound;
Gotoxy(1,10);
write('        ');
write('P');
write('r');
write('o');
write('g');
write('r');
write('a');
write('m');
write('u');
write('l');
write(' ');
write('a');
write(' ');
write('f');
write('o');
write('s');
write('t');
write(' ');
write('m');
write('o');
write('d');
write('i');
write('f');
write('i');
write('c');
write('a');
write('t');
write(' ');
write('!');
write('!');
write('!');
write(' ');
write('N');
write('u');
write(' ');
write('v');
write('a');
write(' ');
write('i');
write('n');
write('c');
write('r');
write('e');
write('d');
write('e');
write('t');
write('i');
write(' ');
write('i');
write('n');
write(' ');
write('n');
write('i');
write('c');
write('i');
write(' ');
write('u');
write('n');
write(' ');
write('f');
write('i');
write('s');
write('i');
write('e');
write('r');
write(' ');
write('!');
ReadKey;
clrscr;
halt;
end;
{ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ}
Procedure ShowProg(procent:byte);
var o,cl:byte;
begin
Gotoxy(32,14);
for o:=1 to 19 do
begin
cl:=0;
if (procent div 5)>=o then cl:=1;
if (procent div 5)<o then cl:=0;
if cl=0 then textcolor(8);
if (cl=1) and (o<4) then textcolor(12);
if (cl=1) and (o>3) and (o<10) then textcolor(14);
if (cl=1) and (o>9) then textcolor(10);
write('þ');
end;
o:=whereX;
textcolor(0);
write(' ');
Gotoxy(o,14);
end;
Procedure LoadSpr;
begin
loadimg16('LETUP.SPR   ',000,leup);
loadimg16('LETDOWN.SPR ',000,ledown);
loadimg16('INDIR.SPR   ',000,leindir);
loadimg16('WHDIR.SPR   ',000,lewhdir);
loadimg16('LETA.SPR    ',000,lea);
loadimg16('LETB.SPR    ',000,leb);
loadimg16('LETC.SPR    ',000,lec);
loadimg16('LETD.SPR    ',000,led);
loadimg16('LETE.SPR    ',000,lee);
loadimg16('LETF.SPR    ',000,lef);
loadimg16('LETG.SPR    ',000,leg);
loadimg16('LETH.SPR    ',000,leh);
loadimg16('LETI.SPR    ',000,lei);
loadimg16('LETJ.SPR    ',000,lej);
loadimg16('LETK.SPR    ',000,lek);
loadimg16('LETL.SPR    ',000,lel);
loadimg16('LETM.SPR    ',000,lem);
loadimg16('LETN.SPR    ',000,len);
loadimg16('LETO.SPR    ',000,leo);
loadimg16('LETP.SPR    ',000,lep);
loadimg16('LETQ.SPR    ',000,leq);
loadimg16('LETR.SPR    ',000,ler);
loadimg16('LETS.SPR    ',000,les);
loadimg16('LETT.SPR    ',000,let);
loadimg16('LETU.SPR    ',000,leu);
loadimg16('LETV.SPR    ',000,lev);
loadimg16('LETW.SPR    ',000,lew);
loadimg16('LETX.SPR    ',000,lex);
loadimg16('LETY.SPR    ',000,ley);
loadimg16('LETZ.SPR    ',000,lez);
loadimg16('LET0.SPR    ',000,le0);
loadimg16('LET1.SPR    ',000,le1);
loadimg16('LET2.SPR    ',000,le2);
loadimg16('LET3.SPR    ',000,le3);
loadimg16('LET4.SPR    ',000,le4);
loadimg16('LET5.SPR    ',000,le5);
loadimg16('LET6.SPR    ',000,le6);
loadimg16('LET7.SPR    ',000,le7);
loadimg16('LET8.SPR    ',000,le8);
loadimg16('LET9.SPR    ',000,le9);
loadimg16('LET0.SPR    ',000,le0);
loadimg16('LET_.SPR    ',000,le_);
loadimg16('LETOK.SPR   ',000,leok);
loadimg16('LETDOT.SPR  ',000,ledot);
loadimg16('LETDEG.SPR  ',000,ledeg);
loadimg16('LETCAN.SPR  ',000,lecancel);
loadimg16('LETMEM.SPR  ',000,lememory);
loadimg16('LETBAK.SPR  ',000,leback);
loadimg16('LETSLH.SPR  ',000,leslash);
loadimg16('BN_MASK.SPR',000,bn_MASK);
loadimg16('BA_MASK.SPR',000,ba_MASK);
loadimg16('BN_PASTE.SPR',000,bn_PASTE);
loadimg16('BA_PASTE.SPR',000,ba_PASTE);
loadimg16('BN_PAINT.SPR',000,bn_PAINT);
loadimg16('BA_PAINT.SPR',000,ba_PAINT);
loadimg16('BN_CHALK.SPR',000,bn_chalk);
loadimg16('BA_CHALK.SPR',000,ba_chalk);
loadimg16('BN_CHARC.SPR',000,bn_charc);
loadimg16('BA_CHARC.SPR',000,ba_charc);
loadimg16('BN_LOAD.SPR ',000,bn_load);
loadimg16('BA_LOAD.SPR ',000,ba_load);
loadimg16('BN_SMEM.SPR ',000,bn_smem);
loadimg16('BA_SMEM.SPR ',000,ba_smem);
loadimg16('BN_WIND.SPR ',000,bn_wind);
loadimg16('BA_WIND.SPR ',000,ba_wind);
loadimg16('BN_SAVE.SPR ',000,bn_save);
loadimg16('BA_SAVE.SPR ',000,ba_save);
loadimg16('BN_RECTN.SPR',000,bn_rectangle);
loadimg16('BA_RECTN.SPR',000,ba_rectangle);
loadimg16('BN_FRECT.SPR',000,bn_filledrect);
loadimg16('BA_FRECT.SPR',000,ba_filledrect);
loadimg16('BN_EYEDR.SPR',000,bn_eyedrop);
loadimg16('BA_EYEDR.SPR',000,ba_eyedrop);
loadimg16('BN_NEW.SPR  ',000,bn_new);
loadimg16('BA_NEW.SPR  ',000,ba_new);
loadimg16('BN_LINE.SPR ',000,bn_line);
loadimg16('BA_LINE.SPR ',000,ba_line);
loadimg16('BN_FLIPH.SPR',000,bn_fliph);
loadimg16('BA_FLIPH.SPR',000,ba_fliph);
loadimg16('BN_FLIPV.SPR',000,bn_flipv);
loadimg16('BA_FLIPV.SPR',000,ba_flipv);
loadimg16('BN_SKEWH.SPR',000,bn_SKEWh);
loadimg16('BA_SKEWH.SPR',000,ba_SKEWh);
loadimg16('BN_SKEWV.SPR',000,bn_SKEWv);
loadimg16('BA_SKEWV.SPR',000,ba_SKEWv);
loadimg16('BN_TINT.SPR ',000,bn_TINT);
loadimg16('BA_TINT.SPR ',000,ba_TINT);
loadimg16('BN_TEXT.SPR ',000,bn_TEXT);
loadimg16('BA_TEXT.SPR ',000,ba_TEXT);
loadimg16('BN_SIZE.SPR ',000,bn_SIZE);
loadimg16('BA_SIZE.SPR ',000,ba_SIZE);
loadimg16('BN_UNDO.SPR ',000,bn_UNDO);
loadimg16('BA_UNDO.SPR ',000,ba_UNDO);
loadimg16('BN_FW.SPR   ',000,bn_fw);
loadimg16('BA_FW.SPR   ',000,ba_fw);
loadimg16('BN_CRAY.SPR ',000,bn_CRAY);
loadimg16('BA_CRAY.SPR ',000,ba_CRAY);
loadimg16('BN_COPY.SPR ',000,bn_COPY);
loadimg16('BA_COPY.SPR ',000,ba_COPY);
loadimg16('BN_CUT.SPR  ',000,bn_Cut);
loadimg16('BA_CUT.SPR  ',000,ba_Cut);
loadimg16('BN_ROT.SPR  ',000,bn_ROT);
loadimg16('BA_ROT.SPR  ',000,ba_ROT);
loadimg16('BN_RECH.SPR ',000,bn_RECH);
loadimg16('BA_RECH.SPR ',000,ba_RECH);
loadimg16('BN_MIRR.SPR ',000,bn_MIRR);
loadimg16('BA_MIRR.SPR ',000,ba_MIRR);
loadimg16('BN_ANIM.SPR ',000,bn_ANIM);
loadimg16('BA_ANIM.SPR ',000,ba_ANIM);
loadimg16('BN_WAND.SPR ',000,bn_WAND);
loadimg16('BA_WAND.SPR ',000,ba_WAND);
loadimg16('BN_BLUR.SPR ',000,bn_BLUR);
loadimg16('BA_BLUR.SPR ',000,ba_BLUR);
loadimg16('BN_FLOOD.SPR',000,bn_flood);
loadimg16('BA_FLOOD.SPR',000,ba_flood);
loadimg16('BN_CSING.SPR',000,bn_csing);
loadimg16('BA_CSING.SPR',000,ba_csing);
loadimg16('BN_XSING.SPR',000,bn_xsing);
loadimg16('BA_XSING.SPR',000,ba_xsing);
loadimg16('BN_BLEED.SPR',000,bn_BLEED);
loadimg16('BA_BLEED.SPR',000,ba_BLEED);
loadimg16('BN_MORPH.SPR',000,bn_MORPH);
loadimg16('BA_MORPH.SPR',000,ba_MORPH);
loadimg16('BN_CCOLR.SPR',000,bn_cCOLR);
loadimg16('BA_CCOLR.SPR',000,ba_cCOLR);
loadimg16('BN_STATC.SPR',000,bn_STATIC);
loadimg16('BA_STATC.SPR',000,ba_STATIC);
loadimg16('BN_XCOLR.SPR',000,bn_xCOLR);
loadimg16('BA_XCOLR.SPR',000,ba_xCOLR);
loadimg16('BN_FELTP.SPR',000,bn_felttip);
loadimg16('BA_FELTP.SPR',000,ba_felttip);
loadimg16('BN_IESIR.SPR',000,bn_iesire);
loadimg16('BA_IESIR.SPR',000,ba_iesire);
loadimg16('BN_FR2BK.SPR',000,bn_for2bak);
loadimg16('BA_FR2BK.SPR',000,ba_for2bak);
loadimg16('BN_XFRBK.SPR',000,bn_xforbak);
loadimg16('BA_XFRBK.SPR',000,ba_xforbak);
loadimg16('C_SAGEAT.SPR',000,c_sageata);
loadimg16('C_SAGEA1.SPR',000,c_sageata2);
loadimg16('C_SAGEA2.SPR',000,c_sageata3);
loadimg16('C_FLOOD.SPR ',000,c_flood);
loadimg16('C_EYEDRP.SPR',000,c_eyedrop);
loadimg16('C_CREION.SPR',000,c_creion);
loadimg16('C_CHALK.SPR ',000,c_creta);
loadimg16('C_CHARC.SPR ',000,c_carbune);
loadimg16('C_PASTE.SPR ',000,c_paste);
loadimg16('C_PENSLA.SPR',000,c_pensula);
loadimg16('C_PAINT.SPR ',000,c_paint);
loadimg16('C_WIND.SPR  ',000,c_wind);
end;
{ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ}
Function Tampered:boolean;
var
checksum2:longint;
checksum3:longint;
checksum4:longint;
x:byte;
kia:file of longint;
tt:longint;
tt2:longint;
tt3:longint;
tt4:longint;
po:longint;
begin
checksum:=0;
checksum2:=0;
checksum3:=232667;
checksum4:=0;
Gotoxy(1,11);
Textcolor(14);
assign(f,'GUI\grafica.grp');
reset(f);
seek(f,4);
while not eof(f) do
begin
read(f,x);
po:=filepos(f);
seek(f,po+9);
checksum2:=checksum2+x;
end;
close(f);
{}
assign(f,'spredit.doc');
reset(f);
while not eof(f) do
begin
read(f,x);
po:=filepos(f);
seek(f,po+2);
checksum4:=checksum4+x;
end;
close(f);
assign(kia,'spredit.chk');
reset(kia);
read (kia,tt3);
read (kia,tt2);
read (kia,tt4);
close(kia);
assign(f,'spredit.exe');
reset(f);
checksum:=filesize(f);
close(f);
if ((checksum<40000) and (checksum2=tt2) and (checksum3=tt3) and (checksum4=tt4)) then Tampered:=false
 else Tampered:=true;
end;
{ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ}
begin
LoadIndexToMEM;
end.
